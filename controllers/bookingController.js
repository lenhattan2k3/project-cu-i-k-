import Booking from "../models/Booking.js";
import Trip from "../models/tripModel.js";

// ‚úÖ ƒê·∫∑t v√©
export const bookTicket = async (req, res) => {
  try {
    const { userId, tripId, hoTen, sdt, soGhe, totalPrice } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!userId || !tripId) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c chuy·∫øn!" });
    }

    // Ki·ªÉm tra chuy·∫øn ƒëi c√≥ t·ªìn t·∫°i kh√¥ng
    const trip = await Trip.findById(tripId);
    if (!trip) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y chuy·∫øn ƒëi" });
    }

    // Ki·ªÉm tra gh·∫ø ƒë√£ ƒë·∫∑t ch∆∞a
    const existingBookings = await Booking.find({ tripId });
    const bookedSeats = existingBookings.flatMap(b => b.soGhe);
    const conflict = soGhe.some(seat => bookedSeats.includes(seat));

    if (conflict) {
      return res.status(400).json({ message: "Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t, vui l√≤ng ch·ªçn gh·∫ø kh√°c" });
    }

    // ‚úÖ T·∫°o v√© m·ªõi
    const newBooking = new Booking({
      userId: String(userId), // üîπ lu√¥n l∆∞u d∆∞·ªõi d·∫°ng string
      tripId,
      hoTen,
      sdt,
      soGhe,
      totalPrice,
    });

    await newBooking.save();

    return res.status(201).json({
      message: "‚úÖ ƒê·∫∑t v√© th√†nh c√¥ng!",
      booking: newBooking,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·∫∑t v√©:", err);
    return res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t v√©", error: err.message });
  }
};

// ‚úÖ L·∫•y t·∫•t c·∫£ v√©
export const getAllBookings = async (req, res) => {
  try {
    const bookings = await Booking.find().populate("tripId");
    res.json(bookings);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch v√©", error: err.message });
  }
};

// ‚úÖ L·∫•y v√© theo userId
export const getBookingsByUser = async (req, res) => {
  try {
    const bookings = await Booking.find({ userId: String(req.params.userId) }).populate("tripId");
    res.json(bookings);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y v√© theo user", error: err.message });
  }
};

// ‚úÖ L·∫•y gh·∫ø ƒë√£ ƒë·∫∑t c·ªßa 1 chuy·∫øn ƒëi
export const getBookedSeats = async (req, res) => {
  try {
    const bookings = await Booking.find({ tripId: req.params.tripId });
    const bookedSeats = bookings.flatMap(b => b.soGhe);
    res.json({ bookedSeats });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t", error: err.message });
  }
};

// ‚úÖ L·∫•y v√© theo s·ªë ƒëi·ªán tho·∫°i
export const getBookingsByPhone = async (req, res) => {
  try {
    const bookings = await Booking.find({ sdt: req.params.sdt }).populate("tripId");
    res.json(bookings);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y v√© theo s·ªë ƒëi·ªán tho·∫°i", error: err.message });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i v√©
export const updateBookingStatus = async (req, res) => {
  try {
    const booking = await Booking.findByIdAndUpdate(
      req.params.id,
      { status: req.body.status },
      { new: true }
    );
    if (!booking) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√©" });
    }
    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", booking });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i v√©", error: err.message });
  }
};

// ‚úÖ H·ªßy v√©
export const cancelBooking = async (req, res) => {
  try {
    const booking = await Booking.findByIdAndDelete(req.params.id);
    if (!booking) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√© ƒë·ªÉ h·ªßy!" });
    }
    res.json({ message: "ƒê√£ h·ªßy v√© th√†nh c√¥ng!", booking });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi h·ªßy v√©", error: err.message });
  }
};
